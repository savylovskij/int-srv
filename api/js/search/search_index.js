var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.552,1,1.552]],["body/controllers/AppController.html",[0,2.445,1,2.445,2,2.716,3,0.614,4,0.614,5,0.513,6,2.716,7,0.614,8,1.403,9,4.866,10,1.948,11,0.053,12,0.972,13,3.383,14,1.118,15,4.246,16,1.468,17,0.614,18,0.723,19,0.614,20,0.251,21,0.972,22,3.383,23,3.383,24,0.033,25,0.042,26,0.033]],["title/modules/AppModule.html",[27,1.021,28,1.552]],["body/modules/AppModule.html",[1,2.275,2,2.75,3,0.444,4,0.444,5,0.372,11,0.054,17,0.901,18,0.523,19,0.444,20,0.182,24,0.024,25,0.033,26,0.024,27,1.496,28,2.815,29,1.062,30,1.062,31,1.41,32,1.41,33,0.927,34,1.41,35,1.41,36,1.966,37,1.966,38,2.326,39,2.025,40,1.972,41,1.41,42,1.41,43,2.448,44,2.305,45,1.966,46,1.41,47,2.448,48,1.22,49,2.448,50,1.41,51,1.41,52,2.448,53,1.966,54,2.305,55,2.448,56,1.131,57,1.966,58,2.448,59,2.448,60,2.448,61,2.448,62,2.448,63,1.966,64,1.966,65,3.425,66,2.448,67,1.647,68,2.448]],["title/modules/AuthModule.html",[27,1.021,38,1.343]],["body/modules/AuthModule.html",[3,0.415,4,0.415,5,0.347,11,0.053,17,0.887,18,0.488,19,0.415,20,0.17,24,0.022,25,0.032,26,0.022,27,1.44,29,0.991,30,0.991,31,1.316,32,1.316,33,0.865,34,2.19,35,2.19,38,2.547,39,1.98,40,1.878,41,1.316,42,1.316,44,2.195,50,1.316,51,1.316,53,1.834,69,1.834,70,1.834,71,1.834,72,2.284,73,2.199,74,2.274,75,1.98,76,2.284,77,2.284,78,1.537,79,3.261,80,1.316,81,1.834,82,2.284,83,2.284,84,1.878,85,2.284,86,2.284,87,2.284,88,1.537,89,2.284,90,2.284,91,1.834,92,2.284,93,1.834,94,2.284]],["title/classes/AuthResolver.html",[20,0.2,84,1.552]],["body/classes/AuthResolver.html",[3,0.454,4,0.454,5,0.38,7,0.454,8,1.149,10,2.003,11,0.053,12,1.149,14,1.149,17,0.784,19,0.454,20,0.186,21,0.999,24,0.024,25,0.034,26,0.024,48,1.247,67,1.684,73,2.039,81,2.009,84,2.003,95,1.441,96,2.009,97,2.342,98,3.209,99,4.319,100,1.247,101,2.502,102,2.502,103,1.317,104,0.999,105,0.854,106,1.317,107,2.009,108,3.467,109,3.478,110,2.502,111,2.792,112,2.153,113,3.478,114,2.502,115,2.009,116,2.009,117,2.009,118,1.684,119,1.684,120,2.34,121,2.502,122,2.502,123,2.009,124,1.441,125,1.441,126,2.502]],["title/injectables/AuthService.html",[73,1.169,127,0.576]],["body/injectables/AuthService.html",[3,0.343,4,0.343,5,0.287,7,0.343,8,0.938,11,0.053,12,0.98,14,0.938,16,1.852,17,0.803,18,0.404,19,0.343,20,0.14,21,0.98,24,0.018,25,0.028,26,0.018,50,1.089,51,1.089,56,0.625,57,1.519,73,1.232,75,1.921,78,1.273,93,1.519,97,2.127,98,2.28,100,1.416,103,1.291,104,0.98,105,0.729,106,1.291,107,2.28,108,3.044,111,1.519,112,1.89,117,1.519,118,1.273,119,1.273,124,1.964,125,1.964,127,0.607,128,0.821,129,1.519,130,3.411,131,1.892,132,4.267,133,1.676,134,1.892,135,1.892,136,1.892,137,3.411,138,1.892,139,1.7,140,2.84,141,1.892,142,1.892,143,2.295,144,2.183,145,2.734,146,1.892,147,2.84,148,1.892,149,2.84,150,1.519,151,1.892,152,1.273,153,1.892,154,1.892,155,1.892,156,1.892,157,1.911,158,1.519,159,1.892,160,1.519,161,2.84,162,1.892,163,1.892,164,1.892,165,1.273]],["title/injectables/GqlAuthGuard.html",[127,0.576,166,1.552]],["body/injectables/GqlAuthGuard.html",[3,0.559,4,0.559,5,0.467,7,0.559,8,1.32,11,0.053,12,0.885,14,1.017,17,0.805,18,0.658,19,0.559,20,0.229,21,0.885,24,0.03,25,0.039,26,0.03,48,1.534,64,2.471,80,1.773,103,1.166,104,0.885,105,0.658,106,1.166,127,0.854,128,1.336,144,1.773,166,2.302,167,3.209,168,2.471,169,3.997,170,3.997,171,3.772,172,3.078,173,3.078,174,3.078,175,2.471,176,3.078,177,2.471,178,3.078,179,3.078]],["title/injectables/JwtStrategy.html",[74,1.343,127,0.576]],["body/injectables/JwtStrategy.html",[3,0.51,4,0.51,5,0.427,7,0.51,8,1.244,11,0.053,12,1.082,14,0.929,17,0.823,18,0.601,19,0.51,20,0.209,21,0.808,24,0.027,25,0.037,26,0.027,50,1.619,51,1.619,74,1.877,80,1.619,88,1.892,91,2.257,97,2.116,100,2.116,103,1.065,104,0.808,105,0.601,106,1.065,127,0.804,128,1.22,139,1.401,150,2.257,158,2.257,160,2.257,175,2.257,180,2.257,181,3.765,182,2.812,183,3.765,184,2.812,185,2.812,186,2.812,187,2.812,188,2.257,189,2.812,190,2.812,191,2.812,192,2.812,193,2.812,194,2.812,195,2.812,196,2.812]],["title/injectables/PasswordService.html",[75,1.169,127,0.576]],["body/injectables/PasswordService.html",[3,0.395,4,0.395,5,0.33,7,0.395,8,1.04,11,0.053,12,1.064,14,1.04,16,2.095,17,0.571,18,0.465,19,0.395,20,0.162,21,1.166,24,0.021,25,0.031,26,0.021,75,1.366,103,1.192,104,0.905,105,0.791,106,1.192,112,2.022,127,0.673,128,0.944,143,2.49,197,1.746,198,2.528,199,3.7,200,3.148,201,3.148,202,3.148,203,4.304,204,2.175,205,3.7,206,4.487,207,3.437,208,4.628,209,2.119,210,3.148,211,2.175,212,1.464,213,1.746,214,1.746,215,3.148,216,2.175,217,3.148,218,3.148,219,1.746,220,2.175,221,2.175,222,2.971,223,2.175,224,2.175,225,2.175]],["title/classes/UserEntity.html",[20,0.2,56,0.89]],["body/classes/UserEntity.html",[3,0.378,4,0.378,5,0.316,7,0.378,10,2.696,11,0.052,12,1.346,16,2.2,17,0.553,19,0.378,20,0.155,24,0.02,25,0.03,26,0.02,56,1.008,67,3.151,95,1.199,104,0.598,105,1.021,118,1.401,119,1.401,139,1.799,165,2.429,198,2.448,207,2.429,212,2.052,226,1.672,227,3.05,228,3.609,229,3.609,230,3.609,231,3.609,232,3.609,233,3.609,234,3.609,235,2.082,236,4.682,237,2.082,238,3.609,239,2.082,240,3.05,241,3.973,242,3.973,243,3.609,244,2.082,245,2.082,246,2.082,247,2.082,248,3.609,249,2.082,250,2.082,251,3.05,252,1.401,253,1.672,254,3.05]],["title/classes/UserResolver.html",[20,0.2,255,1.552]],["body/classes/UserResolver.html",[3,0.479,4,0.479,5,0.4,7,0.479,8,1.191,10,1.519,11,0.053,12,1.036,14,0.871,17,0.866,18,0.564,19,0.479,20,0.196,21,0.758,24,0.026,25,0.035,26,0.026,48,1.315,56,1.459,95,1.519,97,2.048,100,1.315,103,1.366,104,1.036,105,0.77,106,1.366,112,1.797,115,2.118,116,2.118,123,2.118,124,1.519,125,1.519,133,1.808,145,2.427,166,1.519,255,2.077,256,2.118,257,3.606,258,2.638,259,2.638,260,2.638,261,2.638,262,2.638,263,2.118,264,1.775,265,2.638,266,1.775,267,2.638,268,2.638,269,2.638,270,2.638,271,2.638,272,2.638,273,2.638,274,2.638]],["title/injectables/UserService.html",[127,0.576,133,1.021]],["body/injectables/UserService.html",[3,0.319,4,0.319,5,0.266,7,0.319,8,0.887,11,0.054,12,1.13,14,1.205,16,1.414,17,0.662,18,0.375,19,0.319,20,0.13,21,1.049,24,0.017,25,0.026,26,0.017,46,1.011,56,0.58,97,2.392,100,1.338,103,1.382,104,1.049,105,0.78,106,1.382,112,2.217,124,1.011,125,2.101,127,0.573,128,0.762,133,1.016,139,1.96,143,1.181,144,1.546,145,3.23,152,1.806,165,2.456,209,1.181,212,2.193,222,3.463,252,1.181,253,2.155,266,1.181,275,1.409,276,2.684,277,2.684,278,4.653,279,2.684,280,2.684,281,1.755,282,3.649,283,1.755,284,2.684,285,2.684,286,3.259,287,1.755,288,2.684,289,1.755,290,2.684,291,1.755,292,2.684,293,1.755,294,1.755,295,1.755,296,2.684,297,1.755,298,1.755,299,1.409,300,1.755,301,1.755,302,1.755,303,1.755]],["title/modules/UsersModule.html",[27,1.021,39,1.169]],["body/modules/UsersModule.html",[3,0.521,4,0.521,5,0.436,11,0.052,17,0.864,18,0.613,19,0.521,20,0.213,24,0.028,25,0.037,26,0.028,27,1.624,29,1.246,30,1.246,31,1.653,32,1.653,33,1.087,34,2.47,35,2.47,39,2.168,40,2.199,41,1.653,42,1.653,44,1.932,45,2.305,46,1.653,56,0.948,133,1.994,255,2.199,263,2.305,266,1.932,304,2.305,305,2.305,306,2.305,307,2.871,308,2.871,309,2.871]],["title/coverage.html",[310,2.938]],["body/coverage.html",[0,1.574,1,1.574,5,0.415,6,2.194,11,0.052,20,0.311,24,0.027,25,0.036,26,0.027,33,1.035,54,1.839,56,0.903,73,1.186,74,1.362,75,1.186,84,1.574,96,2.194,105,0.584,120,1.839,127,1,129,2.194,133,1.035,157,1.839,166,1.574,167,2.194,168,2.194,180,2.194,197,2.194,226,2.194,255,1.574,256,2.194,264,1.839,275,2.194,310,2.194,311,2.733,312,2.733,313,2.733,314,5.187,315,3.694,316,2.194,317,4.185,318,4.482,319,2.194,320,3.694,321,3.694,322,2.733,323,2.733,324,2.194,325,2.733,326,2.733,327,2.733,328,2.194,329,2.733,330,2.733,331,2.733]],["title/dependencies.html",[30,1.404,332,2.26]],["body/dependencies.html",[11,0.054,18,0.455,24,0.021,25,0.03,26,0.021,30,0.923,33,1.173,46,1.225,48,1.06,63,2.934,78,1.432,80,1.225,88,1.432,105,0.455,188,2.487,219,1.708,252,1.432,333,2.128,334,2.128,335,2.128,336,3.098,337,2.128,338,4.803,339,2.128,340,2.128,341,2.128,342,2.128,343,2.128,344,3.654,345,2.487,346,2.128,347,3.098,348,2.128,349,2.128,350,2.128,351,2.128,352,2.128,353,3.654,354,2.128,355,2.128,356,2.128,357,3.098,358,2.128,359,3.654,360,2.128,361,2.128,362,2.128,363,2.128,364,3.098,365,3.098,366,2.128,367,4.014,368,2.128,369,2.128,370,3.098,371,2.128,372,2.128,373,2.128,374,2.128,375,2.128,376,2.128,377,3.098,378,2.128,379,2.128,380,2.128,381,2.128,382,2.128,383,2.128,384,2.128,385,2.128,386,2.128,387,2.128,388,1.708,389,2.128,390,2.128,391,2.128,392,2.128,393,2.128,394,2.128,395,2.128,396,2.128,397,2.128,398,2.128,399,2.128,400,2.128,401,2.128,402,2.128,403,2.128]],["title/miscellaneous/functions.html",[404,1.302,405,2.598]],["body/miscellaneous/functions.html",[7,0.73,11,0.046,24,0.039,25,0.046,26,0.039,33,1.895,328,3.229,404,2.316,405,3.229,406,4.022]],["title/index.html",[7,0.41,407,2.26,408,2.26]],["body/index.html",[11,0.052,24,0.04,25,0.047,26,0.04,409,4.094,410,4.094]],["title/modules.html",[29,1.588]],["body/modules.html",[11,0.045,24,0.038,25,0.045,26,0.038,28,2.212,29,1.666,38,1.914,39,1.666,345,3.939,411,4.907,412,4.907,413,4.907]],["title/overview.html",[414,2.938]],["body/overview.html",[0,1.613,11,0.051,24,0.027,25,0.037,26,0.027,27,1.06,28,2.799,29,1.215,30,1.215,31,1.613,32,1.613,33,1.06,34,1.613,35,1.613,36,2.248,37,2.248,38,2.615,39,2.154,40,2.162,41,1.613,42,1.613,69,2.248,70,2.248,71,2.248,73,2.154,74,2.112,75,1.838,95,1.613,128,1.215,133,1.88,299,2.248,304,2.248,305,2.248,306,2.248,414,2.248,415,3.755,416,2.8]],["title/miscellaneous/variables.html",[404,1.302,417,2.598]],["body/miscellaneous/variables.html",[7,0.452,11,0.053,16,1.505,21,1.349,24,0.024,25,0.034,26,0.024,54,2.334,104,0.717,105,0.741,120,2.334,139,1.243,144,1.436,152,1.678,157,2.684,171,2.785,177,3.202,207,1.678,209,1.678,213,3.202,214,3.639,264,2.334,316,2.001,319,2.001,324,2.001,388,2.001,404,1.436,417,2.001,418,2.493,419,2.493,420,2.493,421,2.493,422,3.469,423,2.493,424,4.533,425,2.493,426,2.493,427,2.493,428,2.493,429,2.493,430,2.493,431,3.469,432,2.493,433,2.493,434,2.493,435,2.493,436,2.493,437,2.493,438,2.493,439,2.493,440,2.493,441,2.493,442,2.493,443,2.493,444,2.493,445,2.493,446,2.493,447,2.493,448,2.493,449,2.493]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":299,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["1.1.11",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":215,"title":{},"body":{"injectables/PasswordService.html":{}}}],["11.0.0",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["11.1.1",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["11.2.1",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["11.2.10",{"_index":334,"title":{},"body":{"dependencies.html":{}}}],["11.2.9",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["11.4.0",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["15.5.0",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["2.23.0",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":415,"title":{},"body":{"overview.html":{}}}],["3.3.16",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["4.15.2",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":416,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":241,"title":{},"body":{"classes/UserEntity.html":{}}}],["6.6.3",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["7.0.4",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["7.10.3",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["8.6.0",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["9.1.0",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["angular",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":333,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":335,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":410,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["apollo/client",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":28,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:7",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":316,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":96,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:10",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:14",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:21",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:13",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:20",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:38",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:16",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:7",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":197,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:10",{"_index":216,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:16",{"_index":211,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:25",{"_index":204,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":324,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":226,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:13",{"_index":239,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:16",{"_index":250,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:19",{"_index":235,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:22",{"_index":249,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:25",{"_index":237,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:28",{"_index":245,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:31",{"_index":244,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:34",{"_index":247,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":167,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":256,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:14",{"_index":262,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:9",{"_index":259,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":275,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:11",{"_index":283,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:20",{"_index":289,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:28",{"_index":291,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:36",{"_index":293,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:45",{"_index":287,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":307,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/main.ts",{"_index":328,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["arg",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arg.password",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arg.username",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":97,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth/auth.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":173,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":176,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":38,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authresolver",{"_index":84,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":73,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":409,"title":{},"body":{"index.html":{}}}],["backend/api",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":219,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["beta3",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["bootstrap",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":413,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":345,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["class",{"_index":20,"title":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":95,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":304,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":305,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":306,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coded",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":236,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({length",{"_index":240,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({nullable",{"_index":246,"title":{},"body":{"classes/UserEntity.html":{}}}],["compare",{"_index":205,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":225,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":200,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":202,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compodoc/compodoc",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":100,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":281,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":258,"title":{},"body":{"classes/UserResolver.html":{}}}],["context",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["convert",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":310,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":288,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":229,"title":{},"body":{"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":234,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":277,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":285,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":177,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":179,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":264,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":265,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":213,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":30,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":209,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["devtools",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["documentation",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["dynamic",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":230,"title":{},"body":{"classes/UserEntity.html":{}}}],["engine",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":266,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":251,"title":{},"body":{"classes/UserEntity.html":{}}}],["environment",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.connection",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["executioncontext",{"_index":171,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":175,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":278,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":279,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":290,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":280,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":292,"title":{},"body":{"injectables/UserService.html":{}}}],["function",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":405,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getdata",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":201,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":210,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":169,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":170,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":407,"title":{"index.html":{}},"body":{}}],["gqlauthguard",{"_index":166,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":174,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":178,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["graphql",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":269,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":168,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:7",{"_index":172,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":268,"title":{},"body":{"classes/UserResolver.html":{}}}],["hard",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash",{"_index":208,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":223,"title":{},"body":{"injectables/PasswordService.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":221,"title":{},"body":{"injectables/PasswordService.html":{}}}],["id",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":227,"title":{},"body":{"classes/UserEntity.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["injectable",{"_index":127,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":294,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":295,"title":{},"body":{"injectables/UserService.html":{}}}],["int",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["integer",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isignauthpayload",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["iusers",{"_index":228,"title":{},"body":{"classes/UserEntity.html":{}}}],["json",{"_index":388,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":74,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind.string",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":254,"title":{},"body":{"classes/UserEntity.html":{}}}],["login",{"_index":98,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(signinpayload",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":99,"title":{},"body":{"classes/AuthResolver.html":{}}}],["matching",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":404,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":27,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":29,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":301,"title":{},"body":{"injectables/UserService.html":{}}}],["ng",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["ngrx/component",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["nickname",{"_index":231,"title":{},"body":{"classes/UserEntity.html":{}}}],["nrwl/angular",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":243,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":212,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["object",{"_index":423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":414,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":332,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":222,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parseliteral(ast",{"_index":434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":286,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":207,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":203,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":75,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":195,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":196,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":232,"title":{},"body":{"classes/UserEntity.html":{}}}],["plain",{"_index":206,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":238,"title":{},"body":{"classes/UserEntity.html":{}}}],["private",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["promise",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":198,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":271,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":261,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":282,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolver",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":270,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":308,"title":{},"body":{"modules/UsersModule.html":{}}}],["result",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["rounds",{"_index":218,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rxjs",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":217,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":199,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":194,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":220,"title":{},"body":{"injectables/PasswordService.html":{}}}],["send",{"_index":430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["service",{"_index":276,"title":{},"body":{"injectables/UserService.html":{}}}],["services/auth.service",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":263,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["signin",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["srv/shared/utils/interfaces",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["started",{"_index":408,"title":{"index.html":{}},"body":{}}],["statements",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":411,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":412,"title":{},"body":{"modules.html":{}}}],["table",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["this.authservice.login(signinpayload",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":224,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":302,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":296,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":297,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":303,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":274,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["tslib",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":252,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":309,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":242,"title":{},"body":{"classes/UserEntity.html":{}}}],["unknown",{"_index":422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":233,"title":{},"body":{"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":248,"title":{},"body":{"classes/UserEntity.html":{}}}],["useguards",{"_index":267,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":272,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.length",{"_index":298,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0",{"_index":300,"title":{},"body":{"injectables/UserService.html":{}}}],["userentity",{"_index":56,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":284,"title":{},"body":{"injectables/UserService.html":{}}}],["userresolver",{"_index":255,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":253,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userservice",{"_index":133,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":39,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["validate",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":214,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":417,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["welcome",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["whoami",{"_index":257,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":273,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":260,"title":{},"body":{"classes/UserResolver.html":{}}}],["zone.js",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n\n  @Get()\n  getData() {\n    return {message: 'Welcome to backend/api'};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GraphQLModule } from '@nestjs/graphql';\n\nimport { AppController } from './app.controller';\nimport { environment } from '../environments/environment';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { resolverMap } from './app.resolver';\nimport { UserEntity } from './users/entities/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity],\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({ req }) => ({ req }),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    AuthModule,\n    UsersModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { environment } from '../../environments/environment';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './services/auth.service';\nimport { PasswordService } from './services/password.service';\nimport { JwtStrategy } from './services/jwt.strategy';\nimport { AuthResolver } from './resolvers/auth.resolver';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn,\n      },\n    }),\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\nimport type {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@int-srv/shared/utils/interfaces';\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n@Resolver('Auth')\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Query('login')\n  async login(\n    @SignIn() signInPayload: ISignAuthPayload\n  ): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@int-srv/shared/utils/interfaces';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\nimport { UserEntity } from '../../users/entities/user.entity';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  async validateUser(\n    username: string,\n    pass: string\n  ): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n    const isValid = user\n      ? await this.passwordService.compareHash(pass, user.password)\n      : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n\n    return null;\n  }\n\n  async login(signInPayload: ISignAuthPayload): Promise {\n    const user = await this.validateUser(\n      signInPayload.username,\n      signInPayload.password\n    );\n\n    if (!user) throw new UnauthorizedException();\n\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            compareHash\n                        \n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:25\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHash\n                        \n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:16\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:10\n                            \n                        \n\n                \n                    \n                        Salt rounds\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\n\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10;\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds);\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IUsers\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nickname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import type { IUsers } from '@int-srv/shared/utils/interfaces';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity({ name: 'users' })\nexport class UserEntity implements IUsers {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  @CreateDateColumn()\n  created: string;\n\n  @UpdateDateColumn()\n  updated: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ length: 50, unique: true, nullable: true })\n  nickname: string;\n\n  @Column({ nullable: true })\n  phone: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            whoAmI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\nimport { UserService } from '../services/user.service';\nimport { CurrentUser } from '../decorators/user.decorator';\nimport { UserEntity } from '../entities/user.entity';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../guards/gql.auth-guard';\n\n@Resolver('User')\nexport class UserResolver {\n  constructor(private readonly userService: UserService) {}\n\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity): Promise {\n    return await this.userService.findOneById(user.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n            \n                Description\n            \n            \n                User service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:45\n                \n            \n\n\n            \n                \n                    Create user by param\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:20\n                \n            \n\n\n            \n                \n                    Find all users\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:28\n                \n            \n\n\n            \n                \n                    Find user by param id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByUserName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:36\n                \n            \n\n\n            \n                \n                    Find user by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../entities/user.entity';\n\n/**\n * User service\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Find all users\n   */\n  async find(): Promise {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find user by param id\n   * @param id\n   */\n  async findOneById(id: number): Promise {\n    return (await this.userRepository.findOne(id)) || null;\n  }\n\n  /**\n   * Find user by username\n   * @param username\n   */\n  async findOneByUserName(username: string): Promise {\n    const user = await this.userRepository.find({ username });\n    return user && user.length === 1 ? user[0] : null;\n  }\n\n  /**\n   * Create user by param\n   * @param user\n   */\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user);\n    return this.userRepository.save(newUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\nimport { UserService } from './services/user.service';\nimport { UserResolver } from './resolvers/user.resolver';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UserService, UserResolver],\n  exports: [UserService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^11.2.10\n        \n            @angular/cdk : ^11.2.9\n        \n            @angular/common : ^11.2.0\n        \n            @angular/compiler : ^11.2.0\n        \n            @angular/core : ^11.2.0\n        \n            @angular/forms : ^11.2.0\n        \n            @angular/localize : ^11.2.0\n        \n            @angular/material : ^11.2.9\n        \n            @angular/platform-browser : ^11.2.0\n        \n            @angular/platform-browser-dynamic : ^11.2.0\n        \n            @angular/platform-server : ^11.2.0\n        \n            @angular/router : ^11.2.0\n        \n            @apollo/client : ^3.3.16\n        \n            @compodoc/compodoc : ^1.1.11\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.10.3\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @ng-bootstrap/ng-bootstrap : ^9.1.0\n        \n            @ngrx/component-store : ^11.0.0\n        \n            @ngrx/effects : ^11.1.1\n        \n            @ngrx/entity : ^11.0.0\n        \n            @ngrx/router-store : ^11.1.1\n        \n            @ngrx/store : ^11.1.1\n        \n            @ngrx/store-devtools : ^11.1.1\n        \n            @nguniversal/express-engine : ^11.2.1\n        \n            @nrwl/angular : 11.4.0\n        \n            apollo-angular : ^2.4.0\n        \n            apollo-server-express : ^2.23.0\n        \n            bcrypt : ^5.0.1\n        \n            bootstrap : ^5.0.0-beta3\n        \n            express : ^4.15.2\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.4\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.3\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.32\n        \n            zone.js : ^0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nГлавная старница документации backend-api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx;\n})\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            resolverMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString(); // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value); // Value from client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value); // Convert hard-coded AST string to integer and then to Date\n      }\n      return null;\n    },\n  }),\n  JSON: GraphQLJSON,\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SignIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const arg = ctx.getArgs()[1];\n    return { username: arg.username, password: arg.password };\n  }\n)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
